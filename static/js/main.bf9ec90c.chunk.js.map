{"version":3,"sources":["components/Quote.js","components/Interaction.js","components/Box.js","utils/archive.js","components/App.js","serviceWorker.js","index.js"],"names":["Quote","props","className","id","text","author","Interaction","query","replace","console","log","href","onClick","nextQuote","Box","getRandomQuote","archive","getArchive","random","Math","floor","Object","keys","length","quote0","quote1","quote2","quote3","quote4","quote5","quote6","quote7","quote8","quote9","App","React","useState","currentIndex","setCurrentIndex","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAGe,SAASA,EAAMC,GAC5B,OACE,yBAAKC,UAAU,SACb,wBAAIA,UAAU,OAAOC,GAAG,QAAO,4BAAI,mCAAeF,EAAMG,KAAK,qCAC7D,wBAAIF,UAAU,SAASC,GAAG,UAA1B,IAAqCF,EAAMI,S,MCJlC,SAASC,EAAYL,GAClC,IAAIM,EAAQ,UAAIN,EAAMG,KAAV,YAAkBH,EAAMI,QAAUG,QAAQ,KAAK,OAE3D,OADAC,QAAQC,IAAIH,GAEV,yBAAKL,UAAU,eACb,uBACEA,UAAU,QACVC,GAAG,cACHQ,KAAI,oCAGJ,uBAAGT,UAAU,kBAAb,QANF,eASA,4BAAQA,UAAU,aAAaC,GAAG,YAAYS,QAAS,kBAAMX,EAAMY,cAAnE,c,MCZS,SAASC,EAAIb,GAC1B,OACE,yBAAKC,UAAU,MAAMC,GAAG,aACtB,kBAAC,EAAD,CAAOC,KAAMH,EAAMG,KAAMC,OAAQJ,EAAMI,SACvC,kBAAC,EAAD,CAAaQ,UAAWZ,EAAMY,UAAWT,KAAMH,EAAMG,KAAMC,OAAQJ,EAAMI,UCTxE,IAAMU,EAAiB,WAA6B,IAA5BC,EAA2B,uDAAjBC,IACjCC,EAASC,KAAKC,MAAMD,KAAKD,SAAWG,OAAOC,KAAKN,GAASO,QAE/D,OADAd,QAAQC,IAAIQ,GACLA,GAGID,EAAa,WACxB,OAAOD,GAGHA,EAAU,CACdQ,OAAQ,CACNnB,OAAQ,OACRD,KAAK,oEAEPqB,OAAQ,CACNpB,OAAQ,UACRD,KAAM,0CAERsB,OAAQ,CACNrB,OAAQ,QACRD,KAAM,uDAERuB,OAAQ,CACNtB,OAAQ,kBACRD,KAAM,iFAERwB,OAAQ,CACNvB,OAAQ,sBACRD,KAAM,oFAERyB,OAAQ,CACNxB,OAAQ,kBACRD,KAAM,yDAER0B,OAAO,CACLzB,OAAQ,gBACRD,KAAM,yDAER2B,OAAO,CACL1B,OAAQ,cACRD,KAAK,sHAEP4B,OAAO,CACL3B,OAAQ,cACRD,KAAM,oCAER6B,OAAO,CACL5B,OAAQ,SACRD,KAAM,e,MC5CK,SAAS8B,IAAQ,IAAD,EACaC,IAAMC,SAAS,GAD5B,mBACrBC,EADqB,KACPC,EADO,OAEJ,eAAIrB,KAAJ,eAA0BoB,IAA3CjC,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,OAMd,OAJA8B,IAAMI,WAAU,WACdD,EAAgBvB,OACf,IAGD,yBAAKb,UAAU,OACb,kBAAC,EAAD,CACEE,KAAMA,EACNC,OAAQA,EACRQ,UAAW,kBAAMyB,EAAgBvB,SCNrByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.bf9ec90c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/Quote.css'\r\n\r\nexport default function Quote(props){\r\n  return(\r\n    <div className='quote'>\r\n      <h1 className='text' id='text'><em><span>\"</span>{props.text}<span>\"</span></em></h1>\r\n      <h2 className='author' id='author'>-{props.author}</h2>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport './styles/Interaction.css'\r\n\r\nexport default function Interaction(props){\r\n  let query = (`${props.text} ${props.author}`).replace(/ /g,'%20')\r\n  console.log(query)\r\n  return(\r\n    <div className='interaction'>\r\n      <a \r\n        className='tweet'\r\n        id='tweet-quote' \r\n        href={`https://twitter.com/intent/tweet`}\r\n      >\r\n\r\n        <i className=\"fab fa-twitter\">&nbsp;</i>\r\n        Tweet quote\r\n      </a>\r\n      <button className='next-quote' id='new-quote' onClick={() => props.nextQuote()}>New quote</button>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport Quote from './Quote'\r\nimport Interaction from './Interaction'\r\nimport './styles/Box.css';\r\n\r\nexport default function Box(props) {\r\n  return(\r\n    <div className='box' id='quote-box'>\r\n      <Quote text={props.text} author={props.author}/>\r\n      <Interaction nextQuote={props.nextQuote} text={props.text} author={props.author} />\r\n    </div>\r\n  );\r\n}","export const getRandomQuote = (archive = getArchive()) => {\r\n  const random = Math.floor(Math.random() * Object.keys(archive).length);\r\n  console.log(random)\r\n  return random\r\n}\r\n\r\nexport const getArchive = () => {\r\n  return archive\r\n}\r\n\r\nconst archive = {\r\n  quote0: {\r\n    author: 'Ovid',\r\n    text:'Courage conquers all things: it even gives strength to the body.'\r\n  },\r\n  quote1: {\r\n    author: 'Lao Tzu',\r\n    text: 'Great acts are made up of small deeds.'\r\n  },\r\n  quote2: {\r\n    author: 'Plato',\r\n    text: 'The greatest wealth is to live content with little.'\r\n  },\r\n  quote3: {\r\n    author: 'Albert Einstein',\r\n    text: 'Great spirits have always encountered violent opposition from mediocre minds.'\r\n  },\r\n  quote4: {\r\n    author: 'Ralph Waldo Emerson',\r\n    text: 'Our greatest glory is not in never failing, but in rising up every time we fail.'\r\n  },\r\n  quote5: {\r\n    author: 'John F. Kennedy',\r\n    text: 'Those who dare to fail miserably can achieve greatly.'\r\n  },\r\n  quote6:{\r\n    author: 'Richard Nixon',\r\n    text: 'I can take it. The tougher it gets, the cooler I get.'\r\n  },\r\n  quote7:{\r\n    author: 'Rick Warren',\r\n    text: `You need to understand something that will liberate your life: You don't need other people's approval to be happy.`\r\n  },\r\n  quote8:{\r\n    author: 'Alan Retana',\r\n    text: 'Todas hieren, la Ãºltima mata.'\r\n  },\r\n  quote9:{\r\n    author: 'Horace',\r\n    text: 'Carpe diem'\r\n  },\r\n}","import React from 'react'\nimport Box from './Box'\nimport { getArchive, getRandomQuote } from '../utils/archive'\nimport './styles/App.css'\n\nexport default function App () {\n  const [ currentIndex, setCurrentIndex ] = React.useState(0)\n  const { text, author } = {...getArchive()}[`quote${currentIndex}`]\n\n  React.useEffect(() => {\n    setCurrentIndex(getRandomQuote())\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Box \n        text={text}\n        author={author}\n        nextQuote={() => setCurrentIndex(getRandomQuote())}\n      />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}